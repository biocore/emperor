<!doctype html>
<html lang="en">

<head>
   <title>PCoA plot</title>
   <meta charset="utf-8">
   <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">

	<link rel="stylesheet" type="text/css" href="css/handler.css">
	<link rel="stylesheet" type="text/css" href="css/jquery-ui2.css">
	<link rel="stylesheet" type="text/css" href="css/spectrum.css">
	<script type="text/javascript" src="js/jquery-1.7.1.min.js"></script>
	<script type="text/javascript" src="js/jquery-ui-1.8.17.custom.min.js"></script>
	<script src="js/spectrum.js"></script>

	<script src="js/Three.js"></script>
	<script src="js/js/Detector.js"></script>
	<script src="js/js/RequestAnimationFrame.js"></script>
	<script type="text/javascript">
/*
 * __author__ = "Antonio Gonzalez Pena"
 * __copyright__ = "Copyright 2012, E-vident"
 * __credits__ = ["Antonio Gonzalez Pena, Meg Pirrung"]
 * __license__ = "GPL"
 * __version__ = "0.01-dev"
 * __maintainer__ = "Meg Pirrung"
 * __email__ = "meganap@gmail.com"
 * __status__ = "Development"
 */

var headers = [];		//headers of the mapping file
var mapping = {};		//mapping dictionary
var plotIds = [];		//IDs of all items that are plotted
var plotSpheres = {};	//all spheres that are plotted
var plotEllipses = {};	//all ellipses that are plotted
var ellipseOpacity = .2;
var sphereOpacity = 1.0;
var camera;			//plot camera
var max; 			//maximum value of a plot, used for camera placement
var category = "";	//current coloring category
var catIndex = 0;	//current coloring category index
var foundId = "";
var keyBuilt = false;


/* This function recenters the camera, needs to be fixed so that it
actually resets to the original position */
function resetCamera() {
	 camera.aspect = document.getElementById('main_plot').offsetWidth/document.getElementById('main_plot').offsetHeight;
     camera.position.set( 0, 0, max*4); 
	 camera.rotation.set( 0, 0, 0 );
	camera.updateProjectionMatrix();
}

/* Removes duplicates from a list */
function dedupe(list) {
   var set = {};
   for (var i = 0; i < list.length; i++)
	  set[list[i]] = true;
   list = [];
   for (var obj in set)
	  list.push(obj);
   return list;
}

function getColorList(vals) {
var colorVals = [];
	var isNumeric = true;
	for(var i = 0; i < vals.length; i++)
	{
		if(isNaN(parseFloat(vals[i])))
			isNumeric = false;
		else
			colorVals[i] = parseFloat(vals[i]);
	}
	
	var start = colorVals[0];
	var max = colorVals[colorVals.length-1]-colorVals[0];

	var colors = [];
	
	// set the colors for each category value
	if(vals.length == 1)
	{
		colors[0] = new THREE.Color();
		colors[0].setHex("0xff0000");
	}
	else if (vals.length == 2) {
		colors[0] = new THREE.Color();
		colors[0].setHex("0xff0000");
		colors[1] = new THREE.Color();
		colors[1].setHex("0x0000ff");
	}
	else if (vals.length == 3 && !isNumeric) {
		for(var i in vals)
		{
			colors[i] = new THREE.Color();
			colors[i].setHSV(i/vals.length,1,1);
		}
	}
	else {
		if(isNumeric) {
			for(var i in vals)
			{
				colors[i] = new THREE.Color();
				// i*.66 makes it so the gradient goes red->green->blue instead of
				// back around to red
				colors[i].setHSV((colorVals[i]-start)*.66/max,1,1);
			}
		}else {
			for(var i in vals)
			{
				colors[i] = new THREE.Color();
				// i*.66 makes it so the gradient goes red->green->blue instead of
				// back around to red
				colors[i].setHSV(i*.66/vals.length,1,1);
			}
		}
		
	}
	return colors;
}

/* This function is called when a new value is selected in the colorBy menu */
function colorByMenuChanged() {
	// set the new current category and index
	category = document.getElementById('colorbycombo')[document.getElementById('colorbycombo').selectedIndex].value;
	catIndex = headers.indexOf(category);
	
	// get all values of this category from the mapping
	var vals = [];
	for(var i in plotIds){
		vals.push(mapping[plotIds[i]][catIndex]);
	}
	
	vals = dedupe(vals).sort();
	
	colors = getColorList(vals);
	
	// build the colorby table in HTML
	var lines = "<table>";
	for(var i in vals){
		// html classes have a special meaning for '.' and spaces, must remove them
		// as well as special chars
		var validVal = vals[i].replace(/[\. :!@#$%^&*()]/g,'');
		// set the div id so that we can reference this div later
		lines += "<tr><td><div id=\""+validVal+"\"class=\"colorbox\" name=\""+vals[i]+"\"></div></td><td title=\""+vals[i]+"\">";
		
		if(vals[i].length > 25)
			lines+= vals[i].substring(0,25) + "..."
		else
			lines += vals[i];
			
		lines+= "</td></tr>";
	}
	lines += "</table>";
	document.getElementById("colorbylist").innerHTML = lines;
	
	for(var i in vals){
		var validVal = vals[i].replace(/[\. :!@#$%^&*()]/g,'');
		// get the div built earlier and turn it into a color picker
		$('#'+validVal).css('backgroundColor',"#"+colors[i].getHex());
	
		$("#"+validVal).spectrum({
			localStorageKey: 'key',
			color: colors[i].getHex(),
			showInitial: true,
			showPalette: true,
			palette: [
				['red', 'green', 'blue']
			],
			change: function(color) {               
		   	 $(this).css('backgroundColor', color.toHexString());
			var c = color.toHexString();
			if(c.length == 4)
				c = "#"+c.charAt(1)+c.charAt(1)+c.charAt(2)+c.charAt(2)+c.charAt(3)+c.charAt(3);
			 colorChanged($(this).attr('name'), c);
			}
		});
	}
	setKey(vals, colors);
}

/* This function is called when a new value is selected in the showBy menu */
function showByMenuChanged() {
	var category = document.getElementById('showbycombo')[document.getElementById('showbycombo').selectedIndex].value;
	var index = headers.indexOf(category);
	var vals = [];
	
	// get all of the values for the selected category
	for(var i in plotIds){
		vals.push(mapping[plotIds[i]][index]);
	}
	
	vals = dedupe(vals).sort();
	
	// build the showby checkbox table in HTML
	var lines = "<form name=\"showbyform\"><table>"
	for(var i in vals){
		lines += "<tr><td>";
		lines +="<input name=\""+vals[i]+"_\" value=\""+vals[i]+"\" type=\"checkbox\" checked=\"yes\" onClick=\"toggleVisible(\'"+vals[i]+"_\')\">";
		
		lines +="</input></td><td title=\""+vals[i]+"\">";
		if(vals[i].length > 25)
			lines+= vals[i].substring(0,25) + "..."
		else
			lines += vals[i];
		
		lines +="</td></tr>";
		}
	lines += "</table></form>";
	document.getElementById("showbylist").innerHTML = lines;
}

/* Toggle plot items by category selected in showby menu */
function toggleVisible(value) {
	var hidden = !document.showbyform.elements[value].checked;
	
	var category = document.getElementById('showbycombo')[document.getElementById('showbycombo').selectedIndex].value;
	
	value = value.replace('_','');
	for(var i in plotIds)
	{
	var sid = plotIds[i];
	var divid = sid.replace(/\./g,'');
		if(mapping[sid][headers.indexOf(category)] == value && hidden)
		{
			plotEllipses[sid].material.opacity = 0;
			plotSpheres[sid].material.opacity = 0;
			$('#'+divid+"_label").css('display','none');
			
		}
		if(mapping[sid][headers.indexOf(category)] == value && !hidden)
		{
			plotEllipses[sid].material.opacity = .2;
			plotSpheres[sid].material.opacity = 1;
			$('#'+divid+"_label").css('display','block');
		}
	}
}

/* build the plot legend in HTML*/
function setKey(values, colors) {
	if(keyBuilt){
		for(var i = 0; i < values.length; i++)
			colorChanged(values[i], '#'+colors[i].getHex());
	}else {
		var keyHTML = "<table class=\"key\">";
		for(var i in plotIds)
		{
			var sid = plotIds[i];
			var divid = sid.replace(/\./g,'')+"_key";
			var catValue = mapping[sid][catIndex];
			var catColor = colors[values.indexOf(catValue)];
			keyHTML += "<tr id=\""+divid+"row\"><td><div id=\""+divid+"\" name=\""+sid+"\" class=\"colorbox\" style=\"background-color:#";
			keyHTML += catColor.getHex();
			keyHTML += ";\"></div>";
			keyHTML +="</td><td>";
			keyHTML += sid;
			keyHTML += "</td></tr>";
		
			plotEllipses[plotIds[i]].material.color.setHex("0x"+catColor.getHex());
			plotSpheres[plotIds[i]].material.color.setHex("0x"+catColor.getHex());
		}
		keyHTML += "</table>";
		document.getElementById("key").innerHTML = keyHTML;
	
		for(var i in plotIds)
		{
			var sid = plotIds[i];
			var divid = sid.replace(/\./g,'')+"_key";
			$('#'+divid).attr('name',sid);
			$('#'+divid).dblclick(function () {
			toggleFinder($(this), $(this).attr('name'));
			});
		}
		keyBuilt = true;
	}	
}

function toggleFinder(div, divName) {
	if(foundId != divName) {
			$('.colorbox').css('border','1px solid black');
			div.css('border','1px solid white');
			$('#finder').css('opacity',1);
			var coords = toScreenXY(plotSpheres[divName].position, camera, $('#main_plot'));
			$('#finder').css('left',coords['x']-15);
			$('#finder').css('top',coords['y']-5);
			foundId = divName;
		}
		else {
		if($('#finder').css('opacity') == 1)
		{
			$('#finder').css('opacity',0);
			div.css('border','1px solid black');
		}
		else {
			$('#finder').css('opacity',1);
			div.css('border','1px solid white');
			}
		}
}

/* colorChanged event called by the colorpicker */
function colorChanged(catValue,color) {
	for(var i in plotIds)
	{
		if(mapping[plotIds[i]][catIndex] == catValue)
		{
			// get the valid divId for the key and set its color
			$("#"+plotIds[i].replace(/\./g,'')+"_key").css('backgroundColor',color);
			// set the color of the corresponding sphere and ellipse 
			plotEllipses[plotIds[i]].material.color.setHex(color.replace('#','0x'));
			plotSpheres[plotIds[i]].material.color.setHex(color.replace('#','0x'));
		}
	}
}

/* handle events from the ellipse opacity slider */
function eopacitychange(ui) {
	document.getElementById('eopacity').innerHTML = ui.value + "%";
	ellipseOpacity = ui.value/100;
	
	for(var sid in plotEllipses)
		plotEllipses[sid].material.opacity = ellipseOpacity;
}

/* handle events from the sphere opacity slider */
function sopacitychange(ui) {
	document.getElementById('sopacity').innerHTML = ui.value + "%";
	sphereOpacity = ui.value/100;
	
	for(var sid in plotSpheres)
		plotSpheres[sid].material.opacity = sphereOpacity;
}

/* handle events from the label opacity slider */
function lopacitychange(ui) {
	document.getElementById('lopacity').innerHTML = ui.value + "%";
	labelOpacity = ui.value/100;
	
	$('#labels').css('opacity', labelOpacity);
}

/* This function is called when a new value is selected in the colorBy menu */
function labelMenuChanged() {
	if(document.getElementById('labelcombo').selectedIndex == 0)
	{
		document.getElementById("labellist").innerHTML = "";
		return;
	}

	// set the new current category and index
	var labelCategory = document.getElementById('labelcombo')[document.getElementById('labelcombo').selectedIndex].value;
	var labelCatIndex = headers.indexOf(labelCategory);
	
	// get all values of this category from the mapping
	var vals = [];
	for(var i in plotIds){
		vals.push(mapping[plotIds[i]][labelCatIndex]);
	}
	
	vals = dedupe(vals).sort();
	
	colors = getColorList(vals);

	// build the label table in HTML
	var lines = "<form name=\"labels\" id=\"labelForm\"><table>";
	for(var i in vals){
		// html classes have a special meaning for '.' and spaces, must remove them
		// as well as special chars
		var validVal = vals[i].replace(/[\. :!@#$%^&*()]/g,'');
		
		// set the div id, checkbox name so that we can reference this later
		lines += "<tr><td><input name=\""+vals[i]+"\" type=\"checkbox\" checked=\"true\" onClick=\"toggleLabels()\" ></input></td><td><div id=\""+validVal+"Label\" class=\"colorbox\" name=\""+vals[i]+"\"></div></td><td title=\""+vals[i]+"\">";
		
		if(vals[i].length > 25)
			lines+= vals[i].substring(0,25) + "..."
		else
			lines += vals[i];
			
		lines+= "</td></tr>";
	}
	lines += "</table></form>";
	document.getElementById("labellist").innerHTML = lines;
	
	for(var i in vals){
		var validVal = vals[i].replace(/[\. :!@#$%^&*()]/g,'');
		// get the div built earlier and turn it into a color picker
		$('#'+validVal+'Label').css('backgroundColor',"#"+colors[i].getHex());
		labelColorChanged(vals[i], "#"+colors[i].getHex());
		
		$("#"+validVal+'Label').spectrum({
			color: colors[i].getHex(),
			showInitial: true,
			showPalette: true,
			palette: [
				['red', 'green', 'blue']
			],
			change: function(color) {               
		   	 $(this).css('backgroundColor', color.toHexString());
			 labelColorChanged($(this).attr('name'), color.toHexString());
			}
		});
	}
}

function labelColorChanged(value, color) {
	var category = document.getElementById('labelcombo')[document.getElementById('labelcombo').selectedIndex].value;

	value = value.replace('_','');
	
	for(var i in plotIds)
	{
	var sid = plotIds[i];
	var divid = sid.replace(/\./g,'');
	if(mapping[sid][headers.indexOf(category)] == value)
		$('#'+divid+"_label").css('color', color);
	}
}

/* This function turns the labels on and off */
function toggleLabels() {	
	if(document.plotoptions.elements[0].checked)
	{
		$('#labelForm').css('display','block');
		$('#labels').css('display','block');
		$('#labels').css('display','block');
		$("#lopacityslider").slider('enable');
		$("#labelColor").spectrum('enable');
		document.getElementById('labelcombo').disabled = false;
		
		if(document.labels == null)
			return;
			
		var category = document.getElementById('labelcombo')[document.getElementById('labelcombo').selectedIndex].value;
		for(var i = 0; i < document.labels.elements.length; i++)
		{
			var hidden = !document.labels.elements[i].checked;
			var value = document.labels.elements[i].name;
			for(var j in plotIds)
			{
				var sid = plotIds[j];
				var divid = sid.replace(/\./g,'');
				
				if(mapping[sid][headers.indexOf(category)] == value && hidden)
					$('#'+divid+"_label").css('display', 'none');
				else if(mapping[sid][headers.indexOf(category)] == value && !hidden)
					$('#'+divid+"_label").css('display', 'block');	
			}
		}
	}
	else
	{
		$('#labelForm').css('display','none');
		$('#labels').css('display','none');
		$("#lopacityslider").slider('disable');
		document.getElementById('labelcombo').disabled = true;
	}
}

/* This function finds the screen coordinates of any
 position in the current plot.
Used for calculating label placement */
function toScreenXY( position, camera, jqdiv ) {

    var pos = position.clone();
    projScreenMat = new THREE.Matrix4();
    projScreenMat.multiply( camera.projectionMatrix, camera.matrixWorldInverse );
    projScreenMat.multiplyVector3( pos );

		return { x: ( pos.x + 1 ) * jqdiv.width() / 2 + jqdiv.offset().left,
         y: ( - pos.y + 1 ) * jqdiv.height() / 2 + jqdiv.offset().top };
}

function filterKey() {
	var searchVal = document.keyFilter.filterBox.value.toLowerCase();
	for(var i in plotIds)
	{
		var sid = plotIds[i];
		var divid = sid.replace(/\./g,'')+"_keyrow";
		if(sid.toLowerCase().indexOf(searchVal) != -1)
			$('#'+divid).css('display','block');
		else
			$('#'+divid).css('display','none');
	}
}

$(document).ready(function() {
	
	$("#menutabs").tabs();
	
	$("#labelColor").css('backgroundColor', '#fff');
	
	$("#labelColor").spectrum({
			color: '#fff',
			showInitial: true,
			showPalette: true,
			palette: [
				['black', 'red', 'green', 'blue']
			],
			change: function(color) {
		   	 $(this).css('backgroundColor', color.toHexString());
			 $('#labels').css('color', color.toHexString());
			for(var i in plotIds)
			{
				var sid = plotIds[i];
				var divid = sid.replace(/\./g,'');
				$('#'+divid+"_label").css('color', color.toHexString());
			}
			document.getElementById('labelcombo').selectedIndex = 0;
			labelMenuChanged();
			}
		});
	
	$( "#eopacityslider" ).slider({
		range: "max",
		min: 0,
		max: 100,
		value: 20,
		slide: function( event, ui ) {
		    eopacitychange(ui);
		},
		change: function( event, ui ) {
		    eopacitychange(ui);
		}
	});
	document.getElementById('eopacity').innerHTML = $( "#eopacityslider" ).slider( "value")+"%";
	
	$( "#sopacityslider" ).slider({
		range: "max",
		min: 0,
		max: 100,
		value: 100,
		slide: function( event, ui ) {
		    sopacitychange(ui);
		},
		change: function( event, ui ) {
		    sopacitychange(ui);
		}
	});
	document.getElementById('sopacity').innerHTML = $( "#sopacityslider" ).slider( "value")+"%";
	
	$( "#lopacityslider" ).slider({
		range: "max",
		min: 0,
		max: 100,
		value: 100,
		slide: function( event, ui ) {
		    lopacitychange(ui);
		},
		change: function( event, ui ) {
		    lopacitychange(ui);
		}
	});
	document.getElementById('lopacity').innerHTML = $( "#lopacityslider" ).slider( "value")+"%";
	
   // Detecting that webgl is activated
   if ( ! Detector.webgl ) Detector.addGetWebGLMessage();
   
   var main_plot = $('#main_plot');
   var scene, renderer, particles, geometry, materials = [], parameters, i, h, color;
   var mouseX = 0, mouseY = 0;
   
   var winWidth = Math.min(document.getElementById('main_plot').offsetWidth,document.getElementById('main_plot').offsetHeight), view_angle = 35, view_near = 1, view_far = 10000;
   var winAspect = document.getElementById('main_plot').offsetWidth/document.getElementById('main_plot').offsetHeight;
   
   $(window).resize(function() {
	  winWidth	= Math.min(document.getElementById('main_plot').offsetWidth,document.getElementById('main_plot').offsetHeight);
	  winAspect = document.getElementById('main_plot').offsetWidth/document.getElementById('main_plot').offsetHeight;
	  camera.aspect = winAspect;
	  camera.updateProjectionMatrix();
   });
   
   init();
   animate();
   
   function init() {
	  camera = new THREE.PerspectiveCamera(view_angle, winAspect, view_near, view_far);
	
	  
	  $('#main_plot canvas').attr('width',document.getElementById('main_plot').offsetWidth);
	  $('#main_plot canvas').attr('height',document.getElementById('main_plot').offsetHeight);
	  
	  scene = new THREE.Scene();
	  scene.fog = new THREE.FogExp2( 0x000000, 0.0007 );
	  
	  group = new THREE.Object3D();
	  scene.add( group );